{"uid":"7cba524d66ba08a3","name":"Test get users list","fullName":"tests.test_users.TestUsersAPI#test_get_users","historyId":"913ac14f3880af882aba8b8e925efd13","time":{"start":1733114575171,"stop":1733114575575,"duration":404},"description":"Verify retrieving users list with different task IDs","descriptionHtml":"<p>Verify retrieving users list with different task IDs</p>\n","status":"failed","statusMessage":"AssertionError: Response validation failed for Task-Id api-6: 2 validation errors for UsersResponse\nusers.0.nickname\n  String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\nusers.1.nickname\n  String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_too_short","statusTrace":"self = <tests.test_users.TestUsersAPI object at 0x7f2a50db8350>\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7f2a50dcb620>\ntask_id = 'api-6'\n\n    @allure.title(\"Test get users list\")\n    @allure.description(\"Verify retrieving users list with different task IDs\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.parametrize(\"task_id\", [\"api-21\", \"api-6\"])\n    def test_get_users(self, user_api_client: UserAPIClient, task_id: str) -> None:\n        \"\"\"\n        Getting a list of users with a Task-Id.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param task_id: Task ID to be tested\n        \"\"\"\n        with allure.step(f\"Retrieving users list for Task-Id {task_id}\"):\n            response_data = user_api_client.get_users(task_id, offset=0, limit=10)\n    \n            try:\n>               validated_response: UsersResponse = UsersResponse.model_validate(\n                    response_data\n                )\nE               pydantic_core._pydantic_core.ValidationError: 2 validation errors for UsersResponse\nE               users.0.nickname\nE                 String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\nE                   For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\nE               users.1.nickname\nE                 String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\nE                   For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\n\ntests/test_users.py:32: ValidationError\n\nThe above exception was the direct cause of the following exception:\n\nself = <tests.test_users.TestUsersAPI object at 0x7f2a50db8350>\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7f2a50dcb620>\ntask_id = 'api-6'\n\n    @allure.title(\"Test get users list\")\n    @allure.description(\"Verify retrieving users list with different task IDs\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.parametrize(\"task_id\", [\"api-21\", \"api-6\"])\n    def test_get_users(self, user_api_client: UserAPIClient, task_id: str) -> None:\n        \"\"\"\n        Getting a list of users with a Task-Id.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param task_id: Task ID to be tested\n        \"\"\"\n        with allure.step(f\"Retrieving users list for Task-Id {task_id}\"):\n            response_data = user_api_client.get_users(task_id, offset=0, limit=10)\n    \n            try:\n                validated_response: UsersResponse = UsersResponse.model_validate(\n                    response_data\n                )\n            except ValidationError as e:\n                msg = f\"Response validation failed for Task-Id {task_id}: {e}\"\n>               raise AssertionError(msg) from e\nE               AssertionError: Response validation failed for Task-Id api-6: 2 validation errors for UsersResponse\nE               users.0.nickname\nE                 String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\nE                   For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\nE               users.1.nickname\nE                 String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\nE                   For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\n\ntests/test_users.py:37: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1733114571374,"stop":1733114571374,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1733114571375,"stop":1733114571375,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_session_faker","time":{"start":1733114571375,"stop":1733114571377,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1733114571375,"stop":1733114571375,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1733114571375,"stop":1733114571375,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright","time":{"start":1733114571377,"stop":1733114571887,"duration":510},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1733114571887,"stop":1733114571903,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_api_client","time":{"start":1733114575171,"stop":1733114575171,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Verify retrieving users list with different task IDs","status":"failed","statusMessage":"AssertionError: Response validation failed for Task-Id api-6: 2 validation errors for UsersResponse\nusers.0.nickname\n  String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\nusers.1.nickname\n  String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_too_short","statusTrace":"self = <tests.test_users.TestUsersAPI object at 0x7f2a50db8350>\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7f2a50dcb620>\ntask_id = 'api-6'\n\n    @allure.title(\"Test get users list\")\n    @allure.description(\"Verify retrieving users list with different task IDs\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.parametrize(\"task_id\", [\"api-21\", \"api-6\"])\n    def test_get_users(self, user_api_client: UserAPIClient, task_id: str) -> None:\n        \"\"\"\n        Getting a list of users with a Task-Id.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param task_id: Task ID to be tested\n        \"\"\"\n        with allure.step(f\"Retrieving users list for Task-Id {task_id}\"):\n            response_data = user_api_client.get_users(task_id, offset=0, limit=10)\n    \n            try:\n>               validated_response: UsersResponse = UsersResponse.model_validate(\n                    response_data\n                )\nE               pydantic_core._pydantic_core.ValidationError: 2 validation errors for UsersResponse\nE               users.0.nickname\nE                 String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\nE                   For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\nE               users.1.nickname\nE                 String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\nE                   For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\n\ntests/test_users.py:32: ValidationError\n\nThe above exception was the direct cause of the following exception:\n\nself = <tests.test_users.TestUsersAPI object at 0x7f2a50db8350>\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7f2a50dcb620>\ntask_id = 'api-6'\n\n    @allure.title(\"Test get users list\")\n    @allure.description(\"Verify retrieving users list with different task IDs\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.parametrize(\"task_id\", [\"api-21\", \"api-6\"])\n    def test_get_users(self, user_api_client: UserAPIClient, task_id: str) -> None:\n        \"\"\"\n        Getting a list of users with a Task-Id.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param task_id: Task ID to be tested\n        \"\"\"\n        with allure.step(f\"Retrieving users list for Task-Id {task_id}\"):\n            response_data = user_api_client.get_users(task_id, offset=0, limit=10)\n    \n            try:\n                validated_response: UsersResponse = UsersResponse.model_validate(\n                    response_data\n                )\n            except ValidationError as e:\n                msg = f\"Response validation failed for Task-Id {task_id}: {e}\"\n>               raise AssertionError(msg) from e\nE               AssertionError: Response validation failed for Task-Id api-6: 2 validation errors for UsersResponse\nE               users.0.nickname\nE                 String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\nE                   For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\nE               users.1.nickname\nE                 String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\nE                   For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\n\ntests/test_users.py:37: AssertionError","steps":[{"name":"Retrieving users list for Task-Id api-6","time":{"start":1733114575171,"stop":1733114575575,"duration":404},"status":"failed","statusMessage":"AssertionError: Response validation failed for Task-Id api-6: 2 validation errors for UsersResponse\nusers.0.nickname\n  String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\nusers.1.nickname\n  String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\n","statusTrace":"  File \"/home/runner/work/qa-hackathon-raptors/qa-hackathon-raptors/tests/test_users.py\", line 37, in test_get_users\n    raise AssertionError(msg) from e\n","steps":[],"attachments":[{"uid":"88a95cf0e994ad2","name":"API Response","source":"88a95cf0e994ad2.txt","type":"text/plain","size":2254},{"uid":"18f171eb1c56aa72","name":"Status Code","source":"18f171eb1c56aa72.txt","type":"text/plain","size":3},{"uid":"fc87f0fe9b1f0ffa","name":"Headers","source":"fc87f0fe9b1f0ffa.txt","type":"text/plain","size":703},{"uid":"19795b930c992850","name":"URL","source":"19795b930c992850.txt","type":"text/plain","size":63}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":4,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1733114578945,"stop":1733114578950,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright::0","time":{"start":1733114578950,"stop":1733114578956,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"User Management"},{"name":"severity","value":"normal"},{"name":"feature","value":"User API Operations"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_users"},{"name":"subSuite","value":"TestUsersAPI"},{"name":"host","value":"fv-az564-111"},{"name":"thread","value":"5487-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_users"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"task_id","value":"'api-6'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":1,"skipped":0,"passed":4,"unknown":0,"total":9},"items":[{"uid":"f44fbe8a8f8a899c","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/5//#testresult/f44fbe8a8f8a899c","status":"failed","statusDetails":"AssertionError: First user UUID 3cb61d2c-234b-4cde-87c9-e61c21a7d9cc from initial list should not be present in the second list with offset=10","time":{"start":1733100682768,"stop":1733100683487,"duration":719}},{"uid":"3c2db225aaa00855","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/4//#testresult/3c2db225aaa00855","status":"failed","statusDetails":"AssertionError: First user UUID 3cb61d2c-234b-4cde-87c9-e61c21a7d9cc from initial list should not be present in the second list with offset=10","time":{"start":1733100075645,"stop":1733100076461,"duration":816}},{"uid":"1dcc6e7b5d4e7ff7","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/4//#testresult/1dcc6e7b5d4e7ff7","status":"passed","time":{"start":1733094761617,"stop":1733094762372,"duration":755}},{"uid":"f7321fa5221d3a60","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/3//#testresult/f7321fa5221d3a60","status":"passed","time":{"start":1733094535705,"stop":1733094536473,"duration":768}},{"uid":"b1d8b7cf846e827a","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/2//#testresult/b1d8b7cf846e827a","status":"passed","time":{"start":1733087326732,"stop":1733087327336,"duration":604}},{"uid":"a89877fe2f8d7b6e","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/3//#testresult/a89877fe2f8d7b6e","status":"failed","statusDetails":"AssertionError: First user UUID 3cb61d2c-234b-4cde-87c9-e61c21a7d9cc from initial list should not be present in the second list with offset=10","time":{"start":1733086958933,"stop":1733086959519,"duration":586}},{"uid":"202589f3f8d1b582","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/2//#testresult/202589f3f8d1b582","status":"broken","statusDetails":"ValueError: Request failed with status 404","time":{"start":1733086640414,"stop":1733086640570,"duration":156}},{"uid":"1abeebafffc6d7a7","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/1//#testresult/1abeebafffc6d7a7","status":"passed","time":{"start":1733085913840,"stop":1733085914515,"duration":675}}]},"tags":[]},"source":"7cba524d66ba08a3.json","parameterValues":["'api-6'"]}