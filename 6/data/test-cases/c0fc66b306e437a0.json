{"uid":"c0fc66b306e437a0","name":"Test create user","fullName":"tests.test_users.TestUsersAPI#test_create_user","historyId":"aca89f5316622cb158ace9ec4814f780","time":{"start":1733114763260,"stop":1733114763260,"duration":0},"description":"Verify user creation and data validation","descriptionHtml":"<p>Verify user creation and data validation</p>\n","status":"broken","statusMessage":"ValueError: Request failed with status 422","statusTrace":"user_api_client = <services.users.user_api_client.UserAPIClient object at 0x7ff345eca000>\nrequest = <SubRequest 'new_user' for <Function test_create_user[api-22]>>\n\n    @pytest.fixture(params=[\"api-3\", \"api-22\"])\n    def new_user(\n        user_api_client: UserAPIClient, request: pytest.FixtureRequest\n    ) -> Generator[dict[str, Any], Any, None]:\n        \"\"\"\n        A fixture for creating a new user that will be automatically deleted after the test.\n    \n        :param user_api_client: A client for working with the user API\n        :param request: Fixture request object, used for parametrization\n        \"\"\"\n        task_id = request.param\n>       user: dict[str, Any] = user_api_client.create_user(task_id)\n\nconftest.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <services.users.user_api_client.UserAPIClient object at 0x7ff345eca000>\ntask_id = 'api-22'\n\n    def create_user(self, task_id: str) -> dict[str, Any]:\n        \"\"\"\n        Creating a new user.\n    \n        :param task_id: Task ID\n        :return: Full API Response\n        \"\"\"\n        headers = {\"X-Task-Id\": task_id}\n        response = self.post(\n            USERS_ENDPOINT, headers=headers, json=self.payloads.create_user\n        )\n    \n        if not response.ok:\n            msg = f\"Request failed with status {response.status}\"\n>           raise ValueError(msg)\nE           ValueError: Request failed with status 422\n\nservices/users/user_api_client.py:88: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1733114760863,"stop":1733114760863,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1733114760863,"stop":1733114760863,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1733114760863,"stop":1733114760863,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_session_faker","time":{"start":1733114760863,"stop":1733114760865,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1733114760863,"stop":1733114760863,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright","time":{"start":1733114760865,"stop":1733114761312,"duration":447},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1733114761312,"stop":1733114761327,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_api_client","time":{"start":1733114763260,"stop":1733114763260,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"new_user","time":{"start":1733114763260,"stop":1733114763535,"duration":275},"status":"broken","statusMessage":"ValueError: Request failed with status 422\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/home/runner/work/qa-hackathon-raptors/qa-hackathon-raptors/conftest.py\", line 65, in new_user\n    user: dict[str, Any] = user_api_client.create_user(task_id)\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/qa-hackathon-raptors/qa-hackathon-raptors/services/users/user_api_client.py\", line 88, in create_user\n    raise ValueError(msg)\n","steps":[],"attachments":[{"uid":"964ee0e2b3409ca0","name":"API Response","source":"964ee0e2b3409ca0.txt","type":"text/plain","size":64},{"uid":"6170a7b42e6a4aae","name":"Status Code","source":"6170a7b42e6a4aae.txt","type":"text/plain","size":3},{"uid":"f1a484261237e087","name":"Headers","source":"f1a484261237e087.txt","type":"text/plain","size":566},{"uid":"b1551aa93c842f7e","name":"URL","source":"b1551aa93c842f7e.txt","type":"text/plain","size":49}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":4,"hasContent":true,"attachmentStep":false}],"afterStages":[{"name":"api_request_context::0","time":{"start":1733114766671,"stop":1733114766676,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright::0","time":{"start":1733114766676,"stop":1733114766682,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"User API Operations"},{"name":"epic","value":"User Management"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_users"},{"name":"subSuite","value":"TestUsersAPI"},{"name":"host","value":"fv-az1445-62"},{"name":"thread","value":"5486-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_users"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"new_user","value":"'api-22'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":4,"unknown":0,"total":11},"items":[{"uid":"407cd2c332d65ab","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/5//#testresult/407cd2c332d65ab","status":"broken","statusDetails":"ValueError: Request failed with status 422","time":{"start":1733114595315,"stop":1733114595315,"duration":0}},{"uid":"9fee3011dca791f8","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/6//#testresult/9fee3011dca791f8","status":"broken","statusDetails":"ValueError: Request failed with status 500","time":{"start":1733114575582,"stop":1733114575582,"duration":0}},{"uid":"1172ec12379f7def","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/5//#testresult/1172ec12379f7def","status":"broken","statusDetails":"ValueError: Request failed with status 500","time":{"start":1733100688268,"stop":1733100688268,"duration":0}},{"uid":"5288578d7f28a47e","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/4//#testresult/5288578d7f28a47e","status":"broken","statusDetails":"ValueError: Request failed with status 500","time":{"start":1733100081434,"stop":1733100081434,"duration":0}},{"uid":"e5997c003308402d","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/4//#testresult/e5997c003308402d","status":"passed","time":{"start":1733094769754,"stop":1733094769754,"duration":0}},{"uid":"755f97d3d6df5d52","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/3//#testresult/755f97d3d6df5d52","status":"passed","time":{"start":1733094543149,"stop":1733094543149,"duration":0}},{"uid":"9f62a6a590d0fd19","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/2//#testresult/9f62a6a590d0fd19","status":"passed","time":{"start":1733087334295,"stop":1733087334296,"duration":1}},{"uid":"8008dac376fead16","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/3//#testresult/8008dac376fead16","status":"broken","statusDetails":"ValueError: Request failed with status 500","time":{"start":1733086963506,"stop":1733086963506,"duration":0}},{"uid":"3c016ee03cde997e","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/2//#testresult/3c016ee03cde997e","status":"broken","statusDetails":"ValueError: Request failed with status 404","time":{"start":1733086644754,"stop":1733086644754,"duration":0}},{"uid":"a7c28637c3862f90","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/1//#testresult/a7c28637c3862f90","status":"passed","time":{"start":1733085921180,"stop":1733085921180,"duration":0}}]},"tags":[]},"source":"c0fc66b306e437a0.json","parameterValues":["'api-22'"]}