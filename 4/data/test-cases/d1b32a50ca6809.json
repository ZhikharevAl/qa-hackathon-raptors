{"uid":"d1b32a50ca6809","name":"Test search games with specific title","fullName":"tests.test_games.TestGamesAPI#test_search_games","historyId":"bf43f1ad52f8a4de9b39475a73852f3b","time":{"start":1733100073111,"stop":1733100074921,"duration":1810},"description":"Verify retrieving games with the same title (case-insensitive)","descriptionHtml":"<p>Verify retrieving games with the same title (case-insensitive)</p>\n","status":"failed","statusMessage":"AssertionError: ('Expected all games to have the same title (case-insensitive) Elden Ring', 'but found different titles: {\\'atomic heart\\', \\'forza horizon 5\\', \\'elden ring\\', \\'the elder scrolls v: skyrim\\', \"baldur\\'s gate 3\", \\'the last of us\\', \\'the sims 4\\', \"uncharted 4: a thief\\'s end\", \\'the witcher 3: wild hunt\\', \\'red dead redemption 2\\'}')\nassert 10 == 1\n +  where 10 = len({'atomic heart', \"baldur's gate 3\", 'elden ring', 'forza horizon 5', 'red dead redemption 2', 'the elder scrolls v: skyrim', ...})","statusTrace":"self = <tests.test_games.TestGamesAPI object at 0x7f0cfc746630>\ngame_api_client = <services.games.games_api_client.GamesAPIClient object at 0x7f0cfc48a210>\n\n    @allure.title(\"Test search games with specific title\")\n    @allure.description(\n        \"Verify retrieving games with the same title (case-insensitive)\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_search_games(self, game_api_client: GamesAPIClient) -> None:\n        \"\"\"\n        Test getting a list of games with the same title (case-insensitive).\n    \n        :param game_api_client: Instance of GamesAPIClient\n        \"\"\"\n        task_id = \"api-2\"\n        specific_game_name = \"Elden Ring\"\n    \n        with allure.step(f\"Searching for games with title '{specific_game_name}'\"):\n            response_data = game_api_client.search_games(\n                task_id=task_id, query=specific_game_name\n            )\n    \n            try:\n                validated_response = GamesResponse.model_validate(response_data)\n            except Exception as e:\n                msg = f\"Response validation failed: {e}\"\n                raise AssertionError(msg) from e\n    \n            with allure.step(\"Checking game titles consistency\"):\n                game_titles = {game.title.lower() for game in validated_response.games}\n>               assert len(game_titles) == 1, (\n                    f\"Expected all games to have the same title (case-insensitive) \"\n                    f\"{specific_game_name}\",\n                    f\"but found different titles: {game_titles}\",\n                )\nE               AssertionError: ('Expected all games to have the same title (case-insensitive) Elden Ring', 'but found different titles: {\\'atomic heart\\', \\'forza horizon 5\\', \\'elden ring\\', \\'the elder scrolls v: skyrim\\', \"baldur\\'s gate 3\", \\'the last of us\\', \\'the sims 4\\', \"uncharted 4: a thief\\'s end\", \\'the witcher 3: wild hunt\\', \\'red dead redemption 2\\'}')\nE               assert 10 == 1\nE                +  where 10 = len({'atomic heart', \"baldur's gate 3\", 'elden ring', 'forza horizon 5', 'red dead redemption 2', 'the elder scrolls v: skyrim', ...})\n\ntests/test_games.py:40: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1733100072850,"stop":1733100072850,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1733100072850,"stop":1733100072850,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1733100072850,"stop":1733100072850,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_session_faker","time":{"start":1733100072850,"stop":1733100072852,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1733100072850,"stop":1733100072850,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright","time":{"start":1733100072852,"stop":1733100073101,"duration":249},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1733100073101,"stop":1733100073110,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"game_api_client","time":{"start":1733100073110,"stop":1733100073110,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Verify retrieving games with the same title (case-insensitive)","status":"failed","statusMessage":"AssertionError: ('Expected all games to have the same title (case-insensitive) Elden Ring', 'but found different titles: {\\'atomic heart\\', \\'forza horizon 5\\', \\'elden ring\\', \\'the elder scrolls v: skyrim\\', \"baldur\\'s gate 3\", \\'the last of us\\', \\'the sims 4\\', \"uncharted 4: a thief\\'s end\", \\'the witcher 3: wild hunt\\', \\'red dead redemption 2\\'}')\nassert 10 == 1\n +  where 10 = len({'atomic heart', \"baldur's gate 3\", 'elden ring', 'forza horizon 5', 'red dead redemption 2', 'the elder scrolls v: skyrim', ...})","statusTrace":"self = <tests.test_games.TestGamesAPI object at 0x7f0cfc746630>\ngame_api_client = <services.games.games_api_client.GamesAPIClient object at 0x7f0cfc48a210>\n\n    @allure.title(\"Test search games with specific title\")\n    @allure.description(\n        \"Verify retrieving games with the same title (case-insensitive)\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_search_games(self, game_api_client: GamesAPIClient) -> None:\n        \"\"\"\n        Test getting a list of games with the same title (case-insensitive).\n    \n        :param game_api_client: Instance of GamesAPIClient\n        \"\"\"\n        task_id = \"api-2\"\n        specific_game_name = \"Elden Ring\"\n    \n        with allure.step(f\"Searching for games with title '{specific_game_name}'\"):\n            response_data = game_api_client.search_games(\n                task_id=task_id, query=specific_game_name\n            )\n    \n            try:\n                validated_response = GamesResponse.model_validate(response_data)\n            except Exception as e:\n                msg = f\"Response validation failed: {e}\"\n                raise AssertionError(msg) from e\n    \n            with allure.step(\"Checking game titles consistency\"):\n                game_titles = {game.title.lower() for game in validated_response.games}\n>               assert len(game_titles) == 1, (\n                    f\"Expected all games to have the same title (case-insensitive) \"\n                    f\"{specific_game_name}\",\n                    f\"but found different titles: {game_titles}\",\n                )\nE               AssertionError: ('Expected all games to have the same title (case-insensitive) Elden Ring', 'but found different titles: {\\'atomic heart\\', \\'forza horizon 5\\', \\'elden ring\\', \\'the elder scrolls v: skyrim\\', \"baldur\\'s gate 3\", \\'the last of us\\', \\'the sims 4\\', \"uncharted 4: a thief\\'s end\", \\'the witcher 3: wild hunt\\', \\'red dead redemption 2\\'}')\nE               assert 10 == 1\nE                +  where 10 = len({'atomic heart', \"baldur's gate 3\", 'elden ring', 'forza horizon 5', 'red dead redemption 2', 'the elder scrolls v: skyrim', ...})\n\ntests/test_games.py:40: AssertionError","steps":[{"name":"Searching for games with title 'Elden Ring'","time":{"start":1733100073111,"stop":1733100074921,"duration":1810},"status":"failed","statusMessage":"AssertionError: ('Expected all games to have the same title (case-insensitive) Elden Ring', 'but found different titles: {\\'atomic heart\\', \\'forza horizon 5\\', \\'elden ring\\', \\'the elder scrolls v: skyrim\\', \"baldur\\'s gate 3\", \\'the last of us\\', \\'the sims 4\\', \"uncharted 4: a thief\\'s end\", \\'the witcher 3: wild hunt\\', \\'red dead redemption 2\\'}')\nassert 10 == 1\n +  where 10 = len({'atomic heart', \"baldur's gate 3\", 'elden ring', 'forza horizon 5', 'red dead redemption 2', 'the elder scrolls v: skyrim', ...})\n","statusTrace":"  File \"/home/runner/work/qa-hackathon-raptors/qa-hackathon-raptors/tests/test_games.py\", line 40, in test_search_games\n    assert len(game_titles) == 1, (\n","steps":[{"name":"Checking game titles consistency","time":{"start":1733100074921,"stop":1733100074921,"duration":0},"status":"failed","statusMessage":"AssertionError: ('Expected all games to have the same title (case-insensitive) Elden Ring', 'but found different titles: {\\'atomic heart\\', \\'forza horizon 5\\', \\'elden ring\\', \\'the elder scrolls v: skyrim\\', \"baldur\\'s gate 3\", \\'the last of us\\', \\'the sims 4\\', \"uncharted 4: a thief\\'s end\", \\'the witcher 3: wild hunt\\', \\'red dead redemption 2\\'}')\nassert 10 == 1\n +  where 10 = len({'atomic heart', \"baldur's gate 3\", 'elden ring', 'forza horizon 5', 'red dead redemption 2', 'the elder scrolls v: skyrim', ...})\n","statusTrace":"  File \"/home/runner/work/qa-hackathon-raptors/qa-hackathon-raptors/tests/test_games.py\", line 40, in test_search_games\n    assert len(game_titles) == 1, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"19fd01f2af4244a0","name":"API Response","source":"19fd01f2af4244a0.txt","type":"text/plain","size":2577},{"uid":"a0193ef440b44b27","name":"Status Code","source":"a0193ef440b44b27.txt","type":"text/plain","size":3},{"uid":"da73ab6d6a357f8f","name":"Headers","source":"da73ab6d6a357f8f.txt","type":"text/plain","size":703},{"uid":"2dc036f2906aab04","name":"URL","source":"2dc036f2906aab04.txt","type":"text/plain","size":90}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":4,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"fb95374d3e504e28","name":"log","source":"fb95374d3e504e28.txt","type":"text/plain","size":68},{"uid":"9675feee522c1f3","name":"stderr","source":"9675feee522c1f3.txt","type":"text/plain","size":58}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1733100081677,"stop":1733100081680,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright::0","time":{"start":1733100081680,"stop":1733100081686,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"epic","value":"Game Management"},{"name":"feature","value":"Game Search API"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_games"},{"name":"subSuite","value":"TestGamesAPI"},{"name":"host","value":"fv-az1019-173"},{"name":"thread","value":"5571-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_games"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"93b21ed72e991cb0","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/4//#testresult/93b21ed72e991cb0","status":"passed","time":{"start":1733094758412,"stop":1733094760488,"duration":2076}}]},"tags":[]},"source":"d1b32a50ca6809.json","parameterValues":[]}