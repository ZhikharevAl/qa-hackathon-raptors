{"uid":"68f09eafe2984d79","name":"Test get single user details","fullName":"tests.test_users.TestUsersAPI#test_get_user","historyId":"14f75fd339797ae4c852920709775668","time":{"start":1733100076907,"stop":1733100077196,"duration":289},"description":"Verify retrieving details for a specific user","descriptionHtml":"<p>Verify retrieving details for a specific user</p>\n","status":"failed","statusMessage":"AssertionError: User data validation failed: 1 validation error for UserResponse\nnickname\n  String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_too_short","statusTrace":"self = <tests.test_users.TestUsersAPI object at 0x7f0cfc488e90>\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7f0cfc4b7200>\nnew_user = {'avatar_url': '', 'email': 'robinsonkimberly@example.org', 'name': 'Melanie', 'nickname': '', ...}\n\n    @allure.title(\"Test get single user details\")\n    @allure.description(\"Verify retrieving details for a specific user\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_get_user(self, user_api_client: UserAPIClient, new_user: dict) -> None:\n        \"\"\"\n        Test getting user details by UUID.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param new_user: Fixture with a newly created user\n        \"\"\"\n        task_id = \"api-23\"\n        user_uuid = new_user[\"uuid\"]\n    \n        with allure.step(f\"Retrieving user details for UUID {user_uuid}\"):\n            user_data: dict[str, Any] = user_api_client.get_user(user_uuid, task_id)\n    \n            expected_keys = [\"avatar_url\", \"email\", \"name\", \"nickname\", \"uuid\"]\n            assert len(user_data) == len(\n                expected_keys\n            ), f\"Expected {len(expected_keys)} keys, but got {len(user_data)}\"\n            assert user_data[\"uuid\"] == user_uuid, \"UUIDs don't match\"\n    \n            try:\n>               UserResponse.model_validate(user_data)\nE               pydantic_core._pydantic_core.ValidationError: 1 validation error for UserResponse\nE               nickname\nE                 String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\nE                   For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\n\ntests/test_users.py:74: ValidationError\n\nThe above exception was the direct cause of the following exception:\n\nself = <tests.test_users.TestUsersAPI object at 0x7f0cfc488e90>\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7f0cfc4b7200>\nnew_user = {'avatar_url': '', 'email': 'robinsonkimberly@example.org', 'name': 'Melanie', 'nickname': '', ...}\n\n    @allure.title(\"Test get single user details\")\n    @allure.description(\"Verify retrieving details for a specific user\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_get_user(self, user_api_client: UserAPIClient, new_user: dict) -> None:\n        \"\"\"\n        Test getting user details by UUID.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param new_user: Fixture with a newly created user\n        \"\"\"\n        task_id = \"api-23\"\n        user_uuid = new_user[\"uuid\"]\n    \n        with allure.step(f\"Retrieving user details for UUID {user_uuid}\"):\n            user_data: dict[str, Any] = user_api_client.get_user(user_uuid, task_id)\n    \n            expected_keys = [\"avatar_url\", \"email\", \"name\", \"nickname\", \"uuid\"]\n            assert len(user_data) == len(\n                expected_keys\n            ), f\"Expected {len(expected_keys)} keys, but got {len(user_data)}\"\n            assert user_data[\"uuid\"] == user_uuid, \"UUIDs don't match\"\n    \n            try:\n                UserResponse.model_validate(user_data)\n            except ValidationError as e:\n                msg = f\"User data validation failed: {e}\"\n>               raise AssertionError(msg) from e\nE               AssertionError: User data validation failed: 1 validation error for UserResponse\nE               nickname\nE                 String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\nE                   For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\n\ntests/test_users.py:77: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1733100072850,"stop":1733100072850,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1733100072850,"stop":1733100072850,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1733100072850,"stop":1733100072850,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_session_faker","time":{"start":1733100072850,"stop":1733100072852,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1733100072850,"stop":1733100072850,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright","time":{"start":1733100072852,"stop":1733100073101,"duration":249},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1733100073101,"stop":1733100073110,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_api_client","time":{"start":1733100076468,"stop":1733100076468,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"new_user","time":{"start":1733100076468,"stop":1733100076907,"duration":439},"status":"passed","steps":[],"attachments":[{"uid":"90406ecce25c3dbc","name":"API Response","source":"90406ecce25c3dbc.txt","type":"text/plain","size":164},{"uid":"b5542dd4c9acfc7d","name":"Status Code","source":"b5542dd4c9acfc7d.txt","type":"text/plain","size":3},{"uid":"6280f2fe1dacfb01","name":"Headers","source":"6280f2fe1dacfb01.txt","type":"text/plain","size":648},{"uid":"e5e857ebdc82aa60","name":"URL","source":"e5e857ebdc82aa60.txt","type":"text/plain","size":45}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":4,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"Verify retrieving details for a specific user","status":"failed","statusMessage":"AssertionError: User data validation failed: 1 validation error for UserResponse\nnickname\n  String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_too_short","statusTrace":"self = <tests.test_users.TestUsersAPI object at 0x7f0cfc488e90>\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7f0cfc4b7200>\nnew_user = {'avatar_url': '', 'email': 'robinsonkimberly@example.org', 'name': 'Melanie', 'nickname': '', ...}\n\n    @allure.title(\"Test get single user details\")\n    @allure.description(\"Verify retrieving details for a specific user\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_get_user(self, user_api_client: UserAPIClient, new_user: dict) -> None:\n        \"\"\"\n        Test getting user details by UUID.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param new_user: Fixture with a newly created user\n        \"\"\"\n        task_id = \"api-23\"\n        user_uuid = new_user[\"uuid\"]\n    \n        with allure.step(f\"Retrieving user details for UUID {user_uuid}\"):\n            user_data: dict[str, Any] = user_api_client.get_user(user_uuid, task_id)\n    \n            expected_keys = [\"avatar_url\", \"email\", \"name\", \"nickname\", \"uuid\"]\n            assert len(user_data) == len(\n                expected_keys\n            ), f\"Expected {len(expected_keys)} keys, but got {len(user_data)}\"\n            assert user_data[\"uuid\"] == user_uuid, \"UUIDs don't match\"\n    \n            try:\n>               UserResponse.model_validate(user_data)\nE               pydantic_core._pydantic_core.ValidationError: 1 validation error for UserResponse\nE               nickname\nE                 String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\nE                   For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\n\ntests/test_users.py:74: ValidationError\n\nThe above exception was the direct cause of the following exception:\n\nself = <tests.test_users.TestUsersAPI object at 0x7f0cfc488e90>\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7f0cfc4b7200>\nnew_user = {'avatar_url': '', 'email': 'robinsonkimberly@example.org', 'name': 'Melanie', 'nickname': '', ...}\n\n    @allure.title(\"Test get single user details\")\n    @allure.description(\"Verify retrieving details for a specific user\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_get_user(self, user_api_client: UserAPIClient, new_user: dict) -> None:\n        \"\"\"\n        Test getting user details by UUID.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param new_user: Fixture with a newly created user\n        \"\"\"\n        task_id = \"api-23\"\n        user_uuid = new_user[\"uuid\"]\n    \n        with allure.step(f\"Retrieving user details for UUID {user_uuid}\"):\n            user_data: dict[str, Any] = user_api_client.get_user(user_uuid, task_id)\n    \n            expected_keys = [\"avatar_url\", \"email\", \"name\", \"nickname\", \"uuid\"]\n            assert len(user_data) == len(\n                expected_keys\n            ), f\"Expected {len(expected_keys)} keys, but got {len(user_data)}\"\n            assert user_data[\"uuid\"] == user_uuid, \"UUIDs don't match\"\n    \n            try:\n                UserResponse.model_validate(user_data)\n            except ValidationError as e:\n                msg = f\"User data validation failed: {e}\"\n>               raise AssertionError(msg) from e\nE               AssertionError: User data validation failed: 1 validation error for UserResponse\nE               nickname\nE                 String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\nE                   For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\n\ntests/test_users.py:77: AssertionError","steps":[{"name":"Retrieving user details for UUID aa0efdcb-49f3-44d5-b9a9-9c8ab7cbfebf","time":{"start":1733100076907,"stop":1733100077195,"duration":288},"status":"failed","statusMessage":"AssertionError: User data validation failed: 1 validation error for UserResponse\nnickname\n  String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\n","statusTrace":"  File \"/home/runner/work/qa-hackathon-raptors/qa-hackathon-raptors/tests/test_users.py\", line 77, in test_get_user\n    raise AssertionError(msg) from e\n","steps":[],"attachments":[{"uid":"f6b5fabb9cef93c8","name":"API Response","source":"f6b5fabb9cef93c8.txt","type":"text/plain","size":164},{"uid":"3d0cf02e6d31af4a","name":"Status Code","source":"3d0cf02e6d31af4a.txt","type":"text/plain","size":3},{"uid":"9588e1524f3609da","name":"Headers","source":"9588e1524f3609da.txt","type":"text/plain","size":646},{"uid":"bf41cb68ae74ccff","name":"URL","source":"bf41cb68ae74ccff.txt","type":"text/plain","size":82}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":4,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"new_user::0","time":{"start":1733100077202,"stop":1733100078205,"duration":1003},"status":"passed","steps":[],"attachments":[{"uid":"ba4fbc1fc8cc31df","name":"API Response","source":"ba4fbc1fc8cc31df.txt","type":"text/plain","size":14},{"uid":"b42b9137df549488","name":"Status Code","source":"b42b9137df549488.txt","type":"text/plain","size":3},{"uid":"ea8d912197b10a3c","name":"Headers","source":"ea8d912197b10a3c.txt","type":"text/plain","size":579},{"uid":"467a7cd184a0ae95","name":"URL","source":"467a7cd184a0ae95.txt","type":"text/plain","size":82}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1733100081677,"stop":1733100081680,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright::0","time":{"start":1733100081680,"stop":1733100081686,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"User API Operations"},{"name":"epic","value":"User Management"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_users"},{"name":"subSuite","value":"TestUsersAPI"},{"name":"host","value":"fv-az1019-173"},{"name":"thread","value":"5571-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_users"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"new_user","value":"'api-3'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":1,"skipped":0,"passed":4,"unknown":0,"total":7},"items":[{"uid":"7a1022f37ed62eda","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/4//#testresult/7a1022f37ed62eda","status":"passed","time":{"start":1733094762825,"stop":1733094763091,"duration":266}},{"uid":"87993a4922186afa","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/3//#testresult/87993a4922186afa","status":"passed","time":{"start":1733094536922,"stop":1733094537171,"duration":249}},{"uid":"99d60e51bb36c03e","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/2//#testresult/99d60e51bb36c03e","status":"passed","time":{"start":1733087327730,"stop":1733087327964,"duration":234}},{"uid":"58207e342ffa9a23","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/3//#testresult/58207e342ffa9a23","status":"failed","statusDetails":"AssertionError: User data validation failed: 1 validation error for UserResponse\nnickname\n  String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_too_short","time":{"start":1733086959916,"stop":1733086960153,"duration":237}},{"uid":"2873b3f998862868","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/2//#testresult/2873b3f998862868","status":"broken","statusDetails":"ValueError: Request failed with status 404","time":{"start":1733086640575,"stop":1733086640575,"duration":0}},{"uid":"c436664823acb3e0","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/1//#testresult/c436664823acb3e0","status":"passed","time":{"start":1733085914987,"stop":1733085915252,"duration":265}}]},"tags":[]},"source":"68f09eafe2984d79.json","parameterValues":["'api-3'"]}