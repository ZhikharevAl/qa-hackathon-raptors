{"uid":"202589f3f8d1b582","name":"Test get users list","fullName":"tests.test_users.TestUsersAPI#test_get_users","historyId":"913ac14f3880af882aba8b8e925efd13","time":{"start":1733086640414,"stop":1733086640570,"duration":156},"description":"Verify retrieving users list with different task IDs","descriptionHtml":"<p>Verify retrieving users list with different task IDs</p>\n","status":"broken","statusMessage":"ValueError: Request failed with status 404","statusTrace":"self = <tests.test_users.TestUsersAPI object at 0x7fa6388b9d60>\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7fa6388bebd0>\ntask_id = 'api-6'\n\n    @allure.title(\"Test get users list\")\n    @allure.description(\"Verify retrieving users list with different task IDs\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.parametrize(\"task_id\", [\"api-21\", \"api-6\"])\n    def test_get_users(self, user_api_client: UserAPIClient, task_id: str) -> None:\n        \"\"\"\n        Getting a list of users with a Task-Id.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param task_id: Task ID to be tested\n        \"\"\"\n        with allure.step(f\"Retrieving users list for Task-Id {task_id}\"):\n>           response_data = user_api_client.get_users(task_id, offset=0, limit=10)\n\ntests/test_users.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <services.users.user_api_client.UserAPIClient object at 0x7fa6388bebd0>\ntask_id = 'api-6', offset = 0, limit = 10\n\n    def get_users(\n        self, task_id: str, offset: int = 0, limit: int = 10\n    ) -> dict[str, Any]:\n        \"\"\"\n        Getting a list of users with a Task-Id.\n    \n        :param task_id: Task ID\n        :return: Response from the API\n        \"\"\"\n        headers = {\"X-Task-Id\": task_id}\n        params = {\"offset\": offset, \"limit\": limit}\n        response = self.get(USERS_ENDPOINT, headers=headers, params=params)\n    \n        if not response.ok:\n            msg = f\"Request failed with status {response.status}\"\n>           raise ValueError(msg)\nE           ValueError: Request failed with status 404\n\nservices/users/user_api_client.py:39: ValueError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"delete_output_dir","time":{"start":1733086638714,"stop":1733086638714,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1733086638714,"stop":1733086638714,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1733086638715,"stop":1733086638715,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_session_faker","time":{"start":1733086638715,"stop":1733086638716,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1733086638715,"stop":1733086638715,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright","time":{"start":1733086638716,"stop":1733086638951,"duration":235},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1733086638951,"stop":1733086638960,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_api_client","time":{"start":1733086640414,"stop":1733086640414,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Verify retrieving users list with different task IDs","status":"broken","statusMessage":"ValueError: Request failed with status 404","statusTrace":"self = <tests.test_users.TestUsersAPI object at 0x7fa6388b9d60>\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7fa6388bebd0>\ntask_id = 'api-6'\n\n    @allure.title(\"Test get users list\")\n    @allure.description(\"Verify retrieving users list with different task IDs\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.parametrize(\"task_id\", [\"api-21\", \"api-6\"])\n    def test_get_users(self, user_api_client: UserAPIClient, task_id: str) -> None:\n        \"\"\"\n        Getting a list of users with a Task-Id.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param task_id: Task ID to be tested\n        \"\"\"\n        with allure.step(f\"Retrieving users list for Task-Id {task_id}\"):\n>           response_data = user_api_client.get_users(task_id, offset=0, limit=10)\n\ntests/test_users.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <services.users.user_api_client.UserAPIClient object at 0x7fa6388bebd0>\ntask_id = 'api-6', offset = 0, limit = 10\n\n    def get_users(\n        self, task_id: str, offset: int = 0, limit: int = 10\n    ) -> dict[str, Any]:\n        \"\"\"\n        Getting a list of users with a Task-Id.\n    \n        :param task_id: Task ID\n        :return: Response from the API\n        \"\"\"\n        headers = {\"X-Task-Id\": task_id}\n        params = {\"offset\": offset, \"limit\": limit}\n        response = self.get(USERS_ENDPOINT, headers=headers, params=params)\n    \n        if not response.ok:\n            msg = f\"Request failed with status {response.status}\"\n>           raise ValueError(msg)\nE           ValueError: Request failed with status 404\n\nservices/users/user_api_client.py:39: ValueError","steps":[{"name":"Retrieving users list for Task-Id api-6","time":{"start":1733086640414,"stop":1733086640570,"duration":156},"status":"broken","statusMessage":"ValueError: Request failed with status 404\n","statusTrace":"  File \"/home/runner/work/qa-hackathon-raptors/qa-hackathon-raptors/tests/test_users.py\", line 29, in test_get_users\n    response_data = user_api_client.get_users(task_id, offset=0, limit=10)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/qa-hackathon-raptors/qa-hackathon-raptors/services/users/user_api_client.py\", line 39, in get_users\n    raise ValueError(msg)\n","steps":[],"attachments":[{"uid":"db7bf7ceca98e6f","name":"API Response","source":"db7bf7ceca98e6f.txt","type":"text/plain","size":50},{"uid":"3b47108358d63fc8","name":"Status Code","source":"3b47108358d63fc8.txt","type":"text/plain","size":3},{"uid":"16ee2dc26af2ea3d","name":"Headers","source":"16ee2dc26af2ea3d.txt","type":"text/plain","size":132},{"uid":"41995925b487cd7f","name":"URL","source":"41995925b487cd7f.txt","type":"text/plain","size":60}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":4,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1733086645984,"stop":1733086645987,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright::0","time":{"start":1733086645987,"stop":1733086645994,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"User API Operations"},{"name":"epic","value":"User Management"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_users"},{"name":"subSuite","value":"TestUsersAPI"},{"name":"host","value":"fv-az520-129"},{"name":"thread","value":"5526-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_users"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"task_id","value":"'api-6'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"1abeebafffc6d7a7","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/1//#testresult/1abeebafffc6d7a7","status":"passed","time":{"start":1733085913840,"stop":1733085914515,"duration":675}}]},"tags":[]},"source":"202589f3f8d1b582.json","parameterValues":["'api-6'"]}