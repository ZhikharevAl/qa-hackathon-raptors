{"uid":"541b72ee993f48e6","name":"Test get single user details","fullName":"tests.test_users.TestUsersAPI#test_get_user","historyId":"14f75fd339797ae4c852920709775668","time":{"start":1733116325678,"stop":1733116325962,"duration":284},"description":"Verify retrieving details for a specific user","descriptionHtml":"<p>Verify retrieving details for a specific user</p>\n","status":"failed","statusMessage":"AssertionError: User data validation failed: 1 validation error for UserResponse\nnickname\n  String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_too_short","statusTrace":"self = <tests.test_users.TestUsersAPI object at 0x7f8fa2fcb770>\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7f8fa3000680>\nnew_user = {'avatar_url': '', 'email': 'suarezjames@example.com', 'name': 'Bonnie', 'nickname': '', ...}\n\n    @allure.title(\"Test get single user details\")\n    @allure.description(\"Verify retrieving details for a specific user\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_get_user(self, user_api_client: UserAPIClient, new_user: dict) -> None:\n        \"\"\"\n        Test getting user details by UUID.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param new_user: Fixture with a newly created user\n        \"\"\"\n        task_id = \"api-23\"\n        user_uuid = new_user[\"uuid\"]\n    \n        with allure.step(f\"Retrieving user details for UUID {user_uuid}\"):\n            user_data: dict[str, Any] = user_api_client.get_user(user_uuid, task_id)\n    \n            expected_keys = [\"avatar_url\", \"email\", \"name\", \"nickname\", \"uuid\"]\n            assert len(user_data) == len(\n                expected_keys\n            ), f\"Expected {len(expected_keys)} keys, but got {len(user_data)}\"\n            assert user_data[\"uuid\"] == user_uuid, \"UUIDs don't match\"\n    \n            try:\n>               UserResponse.model_validate(user_data)\nE               pydantic_core._pydantic_core.ValidationError: 1 validation error for UserResponse\nE               nickname\nE                 String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\nE                   For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\n\ntests/test_users.py:74: ValidationError\n\nThe above exception was the direct cause of the following exception:\n\nself = <tests.test_users.TestUsersAPI object at 0x7f8fa2fcb770>\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7f8fa3000680>\nnew_user = {'avatar_url': '', 'email': 'suarezjames@example.com', 'name': 'Bonnie', 'nickname': '', ...}\n\n    @allure.title(\"Test get single user details\")\n    @allure.description(\"Verify retrieving details for a specific user\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_get_user(self, user_api_client: UserAPIClient, new_user: dict) -> None:\n        \"\"\"\n        Test getting user details by UUID.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param new_user: Fixture with a newly created user\n        \"\"\"\n        task_id = \"api-23\"\n        user_uuid = new_user[\"uuid\"]\n    \n        with allure.step(f\"Retrieving user details for UUID {user_uuid}\"):\n            user_data: dict[str, Any] = user_api_client.get_user(user_uuid, task_id)\n    \n            expected_keys = [\"avatar_url\", \"email\", \"name\", \"nickname\", \"uuid\"]\n            assert len(user_data) == len(\n                expected_keys\n            ), f\"Expected {len(expected_keys)} keys, but got {len(user_data)}\"\n            assert user_data[\"uuid\"] == user_uuid, \"UUIDs don't match\"\n    \n            try:\n                UserResponse.model_validate(user_data)\n            except ValidationError as e:\n                msg = f\"User data validation failed: {e}\"\n>               raise AssertionError(msg) from e\nE               AssertionError: User data validation failed: 1 validation error for UserResponse\nE               nickname\nE                 String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\nE                   For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\n\ntests/test_users.py:77: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1733116321555,"stop":1733116321555,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1733116321556,"stop":1733116321556,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1733116321556,"stop":1733116321556,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_session_faker","time":{"start":1733116321556,"stop":1733116321557,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1733116321556,"stop":1733116321556,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright","time":{"start":1733116321557,"stop":1733116321794,"duration":237},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1733116321795,"stop":1733116321802,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_api_client","time":{"start":1733116325133,"stop":1733116325133,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"new_user","time":{"start":1733116325133,"stop":1733116325678,"duration":545},"status":"passed","steps":[],"attachments":[{"uid":"e8683ffdae6d3d60","name":"API Response","source":"e8683ffdae6d3d60.txt","type":"text/plain","size":158},{"uid":"5a8d5a2a45586fd3","name":"Status Code","source":"5a8d5a2a45586fd3.txt","type":"text/plain","size":3},{"uid":"f40037ad83bf86d9","name":"Headers","source":"f40037ad83bf86d9.txt","type":"text/plain","size":648},{"uid":"34229c371ba6c10e","name":"URL","source":"34229c371ba6c10e.txt","type":"text/plain","size":45}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":4,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"Verify retrieving details for a specific user","status":"failed","statusMessage":"AssertionError: User data validation failed: 1 validation error for UserResponse\nnickname\n  String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_too_short","statusTrace":"self = <tests.test_users.TestUsersAPI object at 0x7f8fa2fcb770>\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7f8fa3000680>\nnew_user = {'avatar_url': '', 'email': 'suarezjames@example.com', 'name': 'Bonnie', 'nickname': '', ...}\n\n    @allure.title(\"Test get single user details\")\n    @allure.description(\"Verify retrieving details for a specific user\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_get_user(self, user_api_client: UserAPIClient, new_user: dict) -> None:\n        \"\"\"\n        Test getting user details by UUID.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param new_user: Fixture with a newly created user\n        \"\"\"\n        task_id = \"api-23\"\n        user_uuid = new_user[\"uuid\"]\n    \n        with allure.step(f\"Retrieving user details for UUID {user_uuid}\"):\n            user_data: dict[str, Any] = user_api_client.get_user(user_uuid, task_id)\n    \n            expected_keys = [\"avatar_url\", \"email\", \"name\", \"nickname\", \"uuid\"]\n            assert len(user_data) == len(\n                expected_keys\n            ), f\"Expected {len(expected_keys)} keys, but got {len(user_data)}\"\n            assert user_data[\"uuid\"] == user_uuid, \"UUIDs don't match\"\n    \n            try:\n>               UserResponse.model_validate(user_data)\nE               pydantic_core._pydantic_core.ValidationError: 1 validation error for UserResponse\nE               nickname\nE                 String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\nE                   For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\n\ntests/test_users.py:74: ValidationError\n\nThe above exception was the direct cause of the following exception:\n\nself = <tests.test_users.TestUsersAPI object at 0x7f8fa2fcb770>\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7f8fa3000680>\nnew_user = {'avatar_url': '', 'email': 'suarezjames@example.com', 'name': 'Bonnie', 'nickname': '', ...}\n\n    @allure.title(\"Test get single user details\")\n    @allure.description(\"Verify retrieving details for a specific user\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_get_user(self, user_api_client: UserAPIClient, new_user: dict) -> None:\n        \"\"\"\n        Test getting user details by UUID.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param new_user: Fixture with a newly created user\n        \"\"\"\n        task_id = \"api-23\"\n        user_uuid = new_user[\"uuid\"]\n    \n        with allure.step(f\"Retrieving user details for UUID {user_uuid}\"):\n            user_data: dict[str, Any] = user_api_client.get_user(user_uuid, task_id)\n    \n            expected_keys = [\"avatar_url\", \"email\", \"name\", \"nickname\", \"uuid\"]\n            assert len(user_data) == len(\n                expected_keys\n            ), f\"Expected {len(expected_keys)} keys, but got {len(user_data)}\"\n            assert user_data[\"uuid\"] == user_uuid, \"UUIDs don't match\"\n    \n            try:\n                UserResponse.model_validate(user_data)\n            except ValidationError as e:\n                msg = f\"User data validation failed: {e}\"\n>               raise AssertionError(msg) from e\nE               AssertionError: User data validation failed: 1 validation error for UserResponse\nE               nickname\nE                 String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\nE                   For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\n\ntests/test_users.py:77: AssertionError","steps":[{"name":"Retrieving user details for UUID 1392bdde-e951-46d5-8d19-0a82198c23b2","time":{"start":1733116325678,"stop":1733116325962,"duration":284},"status":"failed","statusMessage":"AssertionError: User data validation failed: 1 validation error for UserResponse\nnickname\n  String should have at least 2 characters [type=string_too_short, input_value='', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_too_short\n","statusTrace":"  File \"/home/runner/work/qa-hackathon-raptors/qa-hackathon-raptors/tests/test_users.py\", line 77, in test_get_user\n    raise AssertionError(msg) from e\n","steps":[],"attachments":[{"uid":"3a180bef2d126083","name":"API Response","source":"3a180bef2d126083.txt","type":"text/plain","size":158},{"uid":"28f543087da4587f","name":"Status Code","source":"28f543087da4587f.txt","type":"text/plain","size":3},{"uid":"82bb7d5d68e221eb","name":"Headers","source":"82bb7d5d68e221eb.txt","type":"text/plain","size":648},{"uid":"7fd277392bc14374","name":"URL","source":"7fd277392bc14374.txt","type":"text/plain","size":82}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":4,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"new_user::0","time":{"start":1733116325968,"stop":1733116326666,"duration":698},"status":"passed","steps":[],"attachments":[{"uid":"fb8f031d78898949","name":"API Response","source":"fb8f031d78898949.txt","type":"text/plain","size":14},{"uid":"6938b0f826e95de0","name":"Status Code","source":"6938b0f826e95de0.txt","type":"text/plain","size":3},{"uid":"c09744688b24472a","name":"Headers","source":"c09744688b24472a.txt","type":"text/plain","size":579},{"uid":"874ea231b0ed0cbe","name":"URL","source":"874ea231b0ed0cbe.txt","type":"text/plain","size":82}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1733116338218,"stop":1733116338221,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright::0","time":{"start":1733116338221,"stop":1733116338227,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"User Management"},{"name":"feature","value":"User API Operations"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_users"},{"name":"subSuite","value":"TestUsersAPI"},{"name":"host","value":"fv-az692-554"},{"name":"thread","value":"5498-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_users"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"new_user","value":"'api-3'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"541b72ee993f48e6.json","parameterValues":["'api-3'"]}