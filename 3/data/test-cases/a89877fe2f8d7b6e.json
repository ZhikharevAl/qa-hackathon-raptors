{"uid":"a89877fe2f8d7b6e","name":"Test get users list","fullName":"tests.test_users.TestUsersAPI#test_get_users","historyId":"913ac14f3880af882aba8b8e925efd13","time":{"start":1733086958933,"stop":1733086959519,"duration":586},"description":"Verify retrieving users list with different task IDs","descriptionHtml":"<p>Verify retrieving users list with different task IDs</p>\n","status":"failed","statusMessage":"AssertionError: First user UUID 3cb61d2c-234b-4cde-87c9-e61c21a7d9cc from initial list should not be present in the second list with offset=10","statusTrace":"self = <tests.test_users.TestUsersAPI object at 0x7f75ce7861e0>\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7f75ce7b3620>\ntask_id = 'api-6'\n\n    @allure.title(\"Test get users list\")\n    @allure.description(\"Verify retrieving users list with different task IDs\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.parametrize(\"task_id\", [\"api-21\", \"api-6\"])\n    def test_get_users(self, user_api_client: UserAPIClient, task_id: str) -> None:\n        \"\"\"\n        Getting a list of users with a Task-Id.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param task_id: Task ID to be tested\n        \"\"\"\n        with allure.step(f\"Retrieving users list for Task-Id {task_id}\"):\n            response_data = user_api_client.get_users(task_id, offset=0, limit=10)\n    \n            try:\n                validated_response: UsersResponse = UsersResponse.model_validate(\n                    response_data\n                )\n            except ValidationError as e:\n                msg = f\"Response validation failed for Task-Id {task_id}: {e}\"\n                raise AssertionError(msg) from e\n    \n            assert (\n                validated_response.meta.total > 0\n            ), f\"Meta 'total' should be greater than 0 for Task-Id {task_id}, \"\n            f\"but got {validated_response.meta.total}\"\n            assert (\n                len(validated_response.users) > 0\n            ), f\"Users list should not be empty for Task-Id {task_id}\"\n    \n>           UserAPITestHelpers.validate_offset(\n                user_api_client, task_id, validated_response\n            )\n\ntests/test_users.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7f75ce7b3620>\ntask_id = 'api-6'\nfirst_validated_response = UsersResponse(meta=Meta(total=16), users=[UserResponse(uuid=UUID('3cb61d2c-234b-4cde-87c9-e61c21a7d9cc'), email='penny...(uuid=UUID('47c11c4a-0b59-4a02-92a5-625b188f71c9'), email='max@gmail.com', name='Max', nickname='max', avatar_url='')])\n\n    @staticmethod\n    def validate_offset(\n        user_api_client: UserAPIClient,\n        task_id: str,\n        first_validated_response: UsersResponse,\n    ) -> None:\n        \"\"\"\n        Validate that offset works correctly.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param task_id: Task ID to be tested\n        :param first_validated_response: First page of users response\n        \"\"\"\n        random_offset: int = faker.Faker().random_int(min=1, max=10)\n        second_response_data = user_api_client.get_users(\n            task_id, offset=random_offset, limit=10\n        )\n    \n        try:\n            second_validated_response = UsersResponse.model_validate(\n                second_response_data\n            )\n        except ValidationError as e:\n            msg = (\n                f\"Response validation failed for Task-Id {task_id} \"\n                f\"with offset={random_offset}: {e}\"\n            )\n            raise AssertionError(msg) from e\n    \n        first_user_uuid: UUID = first_validated_response.users[0].uuid\n    \n        second_list_uuids: list[UUID] = [\n            user.uuid for user in second_validated_response.users\n        ]\n>       assert first_user_uuid not in second_list_uuids, (\n            f\"First user UUID {first_user_uuid} from initial list \"\n            f\"should not be present in the second list with offset=10\"\n        )\nE       AssertionError: First user UUID 3cb61d2c-234b-4cde-87c9-e61c21a7d9cc from initial list should not be present in the second list with offset=10\n\nutils/helpers.py:50: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1733086956518,"stop":1733086956518,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1733086956519,"stop":1733086956519,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1733086956519,"stop":1733086956519,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_session_faker","time":{"start":1733086956519,"stop":1733086956520,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1733086956519,"stop":1733086956519,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright","time":{"start":1733086956520,"stop":1733086956756,"duration":236},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1733086956756,"stop":1733086956764,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_api_client","time":{"start":1733086958933,"stop":1733086958933,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Verify retrieving users list with different task IDs","status":"failed","statusMessage":"AssertionError: First user UUID 3cb61d2c-234b-4cde-87c9-e61c21a7d9cc from initial list should not be present in the second list with offset=10","statusTrace":"self = <tests.test_users.TestUsersAPI object at 0x7f75ce7861e0>\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7f75ce7b3620>\ntask_id = 'api-6'\n\n    @allure.title(\"Test get users list\")\n    @allure.description(\"Verify retrieving users list with different task IDs\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.parametrize(\"task_id\", [\"api-21\", \"api-6\"])\n    def test_get_users(self, user_api_client: UserAPIClient, task_id: str) -> None:\n        \"\"\"\n        Getting a list of users with a Task-Id.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param task_id: Task ID to be tested\n        \"\"\"\n        with allure.step(f\"Retrieving users list for Task-Id {task_id}\"):\n            response_data = user_api_client.get_users(task_id, offset=0, limit=10)\n    \n            try:\n                validated_response: UsersResponse = UsersResponse.model_validate(\n                    response_data\n                )\n            except ValidationError as e:\n                msg = f\"Response validation failed for Task-Id {task_id}: {e}\"\n                raise AssertionError(msg) from e\n    \n            assert (\n                validated_response.meta.total > 0\n            ), f\"Meta 'total' should be greater than 0 for Task-Id {task_id}, \"\n            f\"but got {validated_response.meta.total}\"\n            assert (\n                len(validated_response.users) > 0\n            ), f\"Users list should not be empty for Task-Id {task_id}\"\n    \n>           UserAPITestHelpers.validate_offset(\n                user_api_client, task_id, validated_response\n            )\n\ntests/test_users.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7f75ce7b3620>\ntask_id = 'api-6'\nfirst_validated_response = UsersResponse(meta=Meta(total=16), users=[UserResponse(uuid=UUID('3cb61d2c-234b-4cde-87c9-e61c21a7d9cc'), email='penny...(uuid=UUID('47c11c4a-0b59-4a02-92a5-625b188f71c9'), email='max@gmail.com', name='Max', nickname='max', avatar_url='')])\n\n    @staticmethod\n    def validate_offset(\n        user_api_client: UserAPIClient,\n        task_id: str,\n        first_validated_response: UsersResponse,\n    ) -> None:\n        \"\"\"\n        Validate that offset works correctly.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param task_id: Task ID to be tested\n        :param first_validated_response: First page of users response\n        \"\"\"\n        random_offset: int = faker.Faker().random_int(min=1, max=10)\n        second_response_data = user_api_client.get_users(\n            task_id, offset=random_offset, limit=10\n        )\n    \n        try:\n            second_validated_response = UsersResponse.model_validate(\n                second_response_data\n            )\n        except ValidationError as e:\n            msg = (\n                f\"Response validation failed for Task-Id {task_id} \"\n                f\"with offset={random_offset}: {e}\"\n            )\n            raise AssertionError(msg) from e\n    \n        first_user_uuid: UUID = first_validated_response.users[0].uuid\n    \n        second_list_uuids: list[UUID] = [\n            user.uuid for user in second_validated_response.users\n        ]\n>       assert first_user_uuid not in second_list_uuids, (\n            f\"First user UUID {first_user_uuid} from initial list \"\n            f\"should not be present in the second list with offset=10\"\n        )\nE       AssertionError: First user UUID 3cb61d2c-234b-4cde-87c9-e61c21a7d9cc from initial list should not be present in the second list with offset=10\n\nutils/helpers.py:50: AssertionError","steps":[{"name":"Retrieving users list for Task-Id api-6","time":{"start":1733086958933,"stop":1733086959519,"duration":586},"status":"failed","statusMessage":"AssertionError: First user UUID 3cb61d2c-234b-4cde-87c9-e61c21a7d9cc from initial list should not be present in the second list with offset=10\n","statusTrace":"  File \"/home/runner/work/qa-hackathon-raptors/qa-hackathon-raptors/tests/test_users.py\", line 47, in test_get_users\n    UserAPITestHelpers.validate_offset(\n  File \"/home/runner/work/qa-hackathon-raptors/qa-hackathon-raptors/utils/helpers.py\", line 50, in validate_offset\n    assert first_user_uuid not in second_list_uuids, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"a9a4bd796e778d6","name":"API Response","source":"a9a4bd796e778d6.txt","type":"text/plain","size":2263},{"uid":"d66f564be5343f7a","name":"Status Code","source":"d66f564be5343f7a.txt","type":"text/plain","size":3},{"uid":"b75ccf64958d56f9","name":"Headers","source":"b75ccf64958d56f9.txt","type":"text/plain","size":703},{"uid":"6cb7da6a7e46f03e","name":"URL","source":"6cb7da6a7e46f03e.txt","type":"text/plain","size":63},{"uid":"3f76bca9df95be47","name":"API Response","source":"3f76bca9df95be47.txt","type":"text/plain","size":2263},{"uid":"eca51cb4679211ad","name":"Status Code","source":"eca51cb4679211ad.txt","type":"text/plain","size":3},{"uid":"b1433a063de169a0","name":"Headers","source":"b1433a063de169a0.txt","type":"text/plain","size":703},{"uid":"21e5fd53a408da55","name":"URL","source":"21e5fd53a408da55.txt","type":"text/plain","size":63}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":8,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":8,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1733086963719,"stop":1733086963722,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright::0","time":{"start":1733086963722,"stop":1733086963728,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"User API Operations"},{"name":"severity","value":"normal"},{"name":"epic","value":"User Management"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_users"},{"name":"subSuite","value":"TestUsersAPI"},{"name":"host","value":"fv-az1442-141"},{"name":"thread","value":"5573-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_users"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"task_id","value":"'api-6'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":1,"unknown":0,"total":3},"items":[{"uid":"202589f3f8d1b582","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/2//#testresult/202589f3f8d1b582","status":"broken","statusDetails":"ValueError: Request failed with status 404","time":{"start":1733086640414,"stop":1733086640570,"duration":156}},{"uid":"1abeebafffc6d7a7","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/1//#testresult/1abeebafffc6d7a7","status":"passed","time":{"start":1733085913840,"stop":1733085914515,"duration":675}}]},"tags":[]},"source":"a89877fe2f8d7b6e.json","parameterValues":["'api-6'"]}