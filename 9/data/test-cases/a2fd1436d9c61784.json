{"uid":"a2fd1436d9c61784","name":"Test get users list","fullName":"tests.test_users.TestUsersAPI#test_get_users","historyId":"913ac14f3880af882aba8b8e925efd13","time":{"start":1733116752768,"stop":1733116753841,"duration":1073},"description":"Verify retrieving users list with different task IDs","descriptionHtml":"<p>Verify retrieving users list with different task IDs</p>\n","status":"failed","statusMessage":"AssertionError: First user UUID 3cb61d2c-234b-4cde-87c9-e61c21a7d9cc from initial list should not be present in the second list with offset=10","statusTrace":"self = <tests.test_users.TestUsersAPI object at 0x7feaf33db770>\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7feaf340f770>\ntask_id = 'api-6'\n\n    @allure.title(\"Test get users list\")\n    @allure.description(\"Verify retrieving users list with different task IDs\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.parametrize(\"task_id\", [\"api-21\", \"api-6\"])\n    def test_get_users(self, user_api_client: UserAPIClient, task_id: str) -> None:\n        \"\"\"\n        Getting a list of users with a Task-Id.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param task_id: Task ID to be tested\n        \"\"\"\n        with allure.step(f\"Retrieving users list for Task-Id {task_id}\"):\n            response_data = user_api_client.get_users(task_id, offset=0, limit=10)\n    \n            try:\n                validated_response: UsersResponse = UsersResponse.model_validate(\n                    response_data\n                )\n            except ValidationError as e:\n                msg = f\"Response validation failed for Task-Id {task_id}: {e}\"\n                raise AssertionError(msg) from e\n    \n            assert (\n                validated_response.meta.total > 0\n            ), f\"Meta 'total' should be greater than 0 for Task-Id {task_id}, \"\n            f\"but got {validated_response.meta.total}\"\n            assert (\n                len(validated_response.users) > 0\n            ), f\"Users list should not be empty for Task-Id {task_id}\"\n    \n>           UserAPITestHelpers.validate_offset(\n                user_api_client, task_id, validated_response\n            )\n\ntests/test_users.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7feaf340f770>\ntask_id = 'api-6'\nfirst_validated_response = UsersResponse(meta=Meta(total=19), users=[UserResponse(uuid=UUID('3cb61d2c-234b-4cde-87c9-e61c21a7d9cc'), email='penny...(uuid=UUID('47c11c4a-0b59-4a02-92a5-625b188f71c9'), email='max@gmail.com', name='Max', nickname='max', avatar_url='')])\n\n    @staticmethod\n    def validate_offset(\n        user_api_client: UserAPIClient,\n        task_id: str,\n        first_validated_response: UsersResponse,\n    ) -> None:\n        \"\"\"\n        Validate that offset works correctly.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param task_id: Task ID to be tested\n        :param first_validated_response: First page of users response\n        \"\"\"\n        random_offset: int = faker.Faker().random_int(min=1, max=10)\n        second_response_data = user_api_client.get_users(\n            task_id, offset=random_offset, limit=10\n        )\n    \n        try:\n            second_validated_response = UsersResponse.model_validate(\n                second_response_data\n            )\n        except ValidationError as e:\n            msg = (\n                f\"Response validation failed for Task-Id {task_id} \"\n                f\"with offset={random_offset}: {e}\"\n            )\n            raise AssertionError(msg) from e\n    \n        first_user_uuid: UUID = first_validated_response.users[0].uuid\n    \n        second_list_uuids: list[UUID] = [\n            user.uuid for user in second_validated_response.users\n        ]\n>       assert first_user_uuid not in second_list_uuids, (\n            f\"First user UUID {first_user_uuid} from initial list \"\n            f\"should not be present in the second list with offset=10\"\n        )\nE       AssertionError: First user UUID 3cb61d2c-234b-4cde-87c9-e61c21a7d9cc from initial list should not be present in the second list with offset=10\n\nutils/helpers.py:51: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1733116750373,"stop":1733116750373,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1733116750373,"stop":1733116750373,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_session_faker","time":{"start":1733116750373,"stop":1733116750374,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1733116750373,"stop":1733116750373,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1733116750373,"stop":1733116750373,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright","time":{"start":1733116750374,"stop":1733116750609,"duration":235},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1733116750610,"stop":1733116750617,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_api_client","time":{"start":1733116752768,"stop":1733116752768,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Verify retrieving users list with different task IDs","status":"failed","statusMessage":"AssertionError: First user UUID 3cb61d2c-234b-4cde-87c9-e61c21a7d9cc from initial list should not be present in the second list with offset=10","statusTrace":"self = <tests.test_users.TestUsersAPI object at 0x7feaf33db770>\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7feaf340f770>\ntask_id = 'api-6'\n\n    @allure.title(\"Test get users list\")\n    @allure.description(\"Verify retrieving users list with different task IDs\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.parametrize(\"task_id\", [\"api-21\", \"api-6\"])\n    def test_get_users(self, user_api_client: UserAPIClient, task_id: str) -> None:\n        \"\"\"\n        Getting a list of users with a Task-Id.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param task_id: Task ID to be tested\n        \"\"\"\n        with allure.step(f\"Retrieving users list for Task-Id {task_id}\"):\n            response_data = user_api_client.get_users(task_id, offset=0, limit=10)\n    \n            try:\n                validated_response: UsersResponse = UsersResponse.model_validate(\n                    response_data\n                )\n            except ValidationError as e:\n                msg = f\"Response validation failed for Task-Id {task_id}: {e}\"\n                raise AssertionError(msg) from e\n    \n            assert (\n                validated_response.meta.total > 0\n            ), f\"Meta 'total' should be greater than 0 for Task-Id {task_id}, \"\n            f\"but got {validated_response.meta.total}\"\n            assert (\n                len(validated_response.users) > 0\n            ), f\"Users list should not be empty for Task-Id {task_id}\"\n    \n>           UserAPITestHelpers.validate_offset(\n                user_api_client, task_id, validated_response\n            )\n\ntests/test_users.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nuser_api_client = <services.users.user_api_client.UserAPIClient object at 0x7feaf340f770>\ntask_id = 'api-6'\nfirst_validated_response = UsersResponse(meta=Meta(total=19), users=[UserResponse(uuid=UUID('3cb61d2c-234b-4cde-87c9-e61c21a7d9cc'), email='penny...(uuid=UUID('47c11c4a-0b59-4a02-92a5-625b188f71c9'), email='max@gmail.com', name='Max', nickname='max', avatar_url='')])\n\n    @staticmethod\n    def validate_offset(\n        user_api_client: UserAPIClient,\n        task_id: str,\n        first_validated_response: UsersResponse,\n    ) -> None:\n        \"\"\"\n        Validate that offset works correctly.\n    \n        :param user_api_client: Instance of UserAPIClient\n        :param task_id: Task ID to be tested\n        :param first_validated_response: First page of users response\n        \"\"\"\n        random_offset: int = faker.Faker().random_int(min=1, max=10)\n        second_response_data = user_api_client.get_users(\n            task_id, offset=random_offset, limit=10\n        )\n    \n        try:\n            second_validated_response = UsersResponse.model_validate(\n                second_response_data\n            )\n        except ValidationError as e:\n            msg = (\n                f\"Response validation failed for Task-Id {task_id} \"\n                f\"with offset={random_offset}: {e}\"\n            )\n            raise AssertionError(msg) from e\n    \n        first_user_uuid: UUID = first_validated_response.users[0].uuid\n    \n        second_list_uuids: list[UUID] = [\n            user.uuid for user in second_validated_response.users\n        ]\n>       assert first_user_uuid not in second_list_uuids, (\n            f\"First user UUID {first_user_uuid} from initial list \"\n            f\"should not be present in the second list with offset=10\"\n        )\nE       AssertionError: First user UUID 3cb61d2c-234b-4cde-87c9-e61c21a7d9cc from initial list should not be present in the second list with offset=10\n\nutils/helpers.py:51: AssertionError","steps":[{"name":"Retrieving users list for Task-Id api-6","time":{"start":1733116752768,"stop":1733116753840,"duration":1072},"status":"failed","statusMessage":"AssertionError: First user UUID 3cb61d2c-234b-4cde-87c9-e61c21a7d9cc from initial list should not be present in the second list with offset=10\n","statusTrace":"  File \"/home/runner/work/qa-hackathon-raptors/qa-hackathon-raptors/tests/test_users.py\", line 47, in test_get_users\n    UserAPITestHelpers.validate_offset(\n  File \"/home/runner/work/qa-hackathon-raptors/qa-hackathon-raptors/utils/helpers.py\", line 51, in validate_offset\n    assert first_user_uuid not in second_list_uuids, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"6831e04ace6c4fd1","name":"API Response","source":"6831e04ace6c4fd1.txt","type":"text/plain","size":2257},{"uid":"9843b3290ad52ea6","name":"Status Code","source":"9843b3290ad52ea6.txt","type":"text/plain","size":3},{"uid":"671b7890ada4b634","name":"Headers","source":"671b7890ada4b634.txt","type":"text/plain","size":702},{"uid":"d852dac2093b7004","name":"URL","source":"d852dac2093b7004.txt","type":"text/plain","size":63},{"uid":"33394122956e873e","name":"API Response","source":"33394122956e873e.txt","type":"text/plain","size":2257},{"uid":"1f97635527190e31","name":"Status Code","source":"1f97635527190e31.txt","type":"text/plain","size":3},{"uid":"6b071226c28d6583","name":"Headers","source":"6b071226c28d6583.txt","type":"text/plain","size":703},{"uid":"eb4108266f4dfa63","name":"URL","source":"eb4108266f4dfa63.txt","type":"text/plain","size":63}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":8,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":8,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1733116766020,"stop":1733116766023,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright::0","time":{"start":1733116766023,"stop":1733116766029,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"epic","value":"User Management"},{"name":"feature","value":"User API Operations"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_users"},{"name":"subSuite","value":"TestUsersAPI"},{"name":"host","value":"fv-az885-149"},{"name":"thread","value":"5565-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_users"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"task_id","value":"'api-6'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"a5b028e4330f20f9","reportUrl":"https://ZhikharevAl.github.io/qa-hackathon-raptors/8//#testresult/a5b028e4330f20f9","status":"failed","statusDetails":"AssertionError: First user UUID 3cb61d2c-234b-4cde-87c9-e61c21a7d9cc from initial list should not be present in the second list with offset=10","time":{"start":1733116324350,"stop":1733116325124,"duration":774}}]},"tags":[]},"source":"a2fd1436d9c61784.json","parameterValues":["'api-6'"]}